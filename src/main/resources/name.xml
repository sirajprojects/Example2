<!--<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mapper.ExampleMapper">
  <select id="findAll" resultType="com.example.model.Example">
    SELECT * FROM example_table
  </select>
</mapper>


Summary
Oracle Configuration: Set up your Oracle properties in application.properties.
DataSource Configuration: Define DataSource in a configuration class.
XML Parsing: Use JAXB to parse config.xml and configure JdbcAccess accordingly.
Service and Factory Classes: Adapt your service and factory classes to use Spring Boot and MyBatis.
Dependency Injection: Use Springâ€™s @Autowired to inject dependencies.
Main Application: Ensure proper component scanning and setup in the main application class.
By following these steps, you can effectively migrate your Oracle-based Java project to a Spring Boot application with MyBatis, maintaining the structure and functionality of your original design while incorporating the custom configuration from config.xml.-->